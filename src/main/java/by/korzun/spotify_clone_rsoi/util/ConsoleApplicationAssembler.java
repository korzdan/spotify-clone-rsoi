package by.korzun.spotify_clone_rsoi.util;

import by.korzun.spotify_clone_rsoi.domain.TrackHistory;
import by.korzun.spotify_clone_rsoi.service.DefaultTrackHistoryService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import java.time.YearMonth;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class ConsoleApplicationAssembler {
    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(new JavaTimeModule());
    private static final Scanner COMMAND_SCANNER = new Scanner(System.in);

    private static List<TrackHistory> allTrackHistory;
    private static DefaultTrackHistoryService defaultTrackService;

    static {
        try {
            allTrackHistory = OBJECT_MAPPER.readValue(
                    ClassLoader.getSystemClassLoader().getResourceAsStream("init.json"),
                    new TypeReference<List<TrackHistory>>(){});
        } catch (Exception e) {
            System.err.println("Error caught when using ObjectMapper: " + e.getMessage());
        }
        defaultTrackService = new DefaultTrackHistoryService(allTrackHistory);
    }

    public static void runApplication() {
        int running = 1;
        System.out.println("Welcome to my Spotify clone! What's interesting to you?");
        while(running == 1) {

            System.out.println("1 - a playlist of top tracks of this month");
            System.out.println("2 - a playlist of top tracks of previous month");
            System.out.println("3 - a playlist generated by us ;)");
            System.out.println("4 - quit");

            /*int command = COMMAND_SCANNER.nextInt();
            while (COMMAND_SCANNER.hasNextInt()) {

            }*/

            try {
                switch (COMMAND_SCANNER.nextInt()) {
                    case 1 -> showInConsoleTopTracksOfTheMonth();
                    case 2 -> showInConsoleTopTracksOfPreviousMonth();
                    case 3 -> showInConsoleRandomTracks();
                    case 4 -> running = 0;
                    default -> System.err.println("There is an error. Please enter correct number.");
                }
            } catch (InputMismatchException exception) {
                System.err.println("Please, enter a number.");
                COMMAND_SCANNER.next();
            }
        }
        COMMAND_SCANNER.close();
    }

    private static void showInConsoleTopTracksOfPreviousMonth() {
        defaultTrackService.getPlaylistOfTopTracksOfTheMonthWithoutCachedTracks(YearMonth.now())
                .getTracks()
                .forEach(System.out::println);
    }

    private static void showInConsoleTopTracksOfTheMonth() {
        defaultTrackService.getPlaylistOfTopTracksOfTheMonth(YearMonth.now())
                .getTracks()
                .forEach(System.out::println);
    }

    private static void showInConsoleRandomTracks() {
        defaultTrackService.getRandomTracks(YearMonth.now())
                .getTracks()
                .forEach(System.out::println);
    }
}
